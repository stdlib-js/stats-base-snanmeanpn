{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/snanmeanpn.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snanmeanpn( 5, x, 2, 1 );\n* // returns 1.25\n*/\nfunction snanmeanpn( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\ts = float64ToFloat32( s + v );\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts = float64ToFloat32( s / n );\n\n\t// Compute an error term...\n\tix = offsetX;\n\tt = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt = float64ToFloat32( t + float64ToFloat32(v-s) );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( s + float64ToFloat32(t/n) );\n}\n\n\n// EXPORTS //\n\nexport default snanmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snanmeanpn( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction snanmeanpn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snanmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport snanmeanpn from './snanmeanpn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snanmeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snanmeanpn;\n"],"names":["snanmeanpn","N","x","strideX","offsetX","ix","v","s","t","n","i","NaN","float64ToFloat32","ndarray","stride2offset","setReadOnly"],"mappings":";;sUAqDA,SAASA,EAAYC,EAAGC,EAAGC,EAASC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAER,GAAW,IAANV,GAAuB,IAAZE,EACf,OAAOD,EAAGE,GAOX,IALAC,EAAKD,EAGLG,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIT,EAAGS,KACnBJ,EAAIJ,EAAGG,KACIC,IACVC,EAAIK,EAAkBL,EAAID,GAC1BG,GAAK,GAENJ,GAAMF,EAEP,GAAW,IAANM,EACJ,OAAOE,IAOR,IALAJ,EAAIK,EAAkBL,EAAIE,GAG1BJ,EAAKD,EACLI,EAAI,EACEE,EAAI,EAAGA,EAAIT,EAAGS,KACnBJ,EAAIJ,EAAGG,KACIC,IACVE,EAAII,EAAkBJ,EAAII,EAAiBN,EAAEC,KAE9CF,GAAMF,EAEP,OAAOS,EAAkBL,EAAIK,EAAiBJ,EAAEC,GACjD,CC3CA,SAAST,EAAYC,EAAGC,EAAGC,GAC1B,OAAOU,EAASZ,EAAGC,EAAGC,EAASW,EAAeb,EAAGE,GAClD,CC1BAY,EAAAf,EAAA,UAAAa"}